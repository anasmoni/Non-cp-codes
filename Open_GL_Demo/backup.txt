#include<bits/stdc++.h>

#include <windows.h>
#include <glut.h>
#include "bitmap_image.hpp"
using namespace std;

typedef long long int lli;
typedef unsigned long long int ulli;
typedef pair<int,int> pii;

#define ones(x) __builtin_popcount(x)
#define onesl(x) __builtin_popcountl(x)
#define onesll(x) __builtin_popcountll(x)

#define pb push_back
#define eb emplace_back
#define mp make_pair
#define mt make_tuple
#define scn(n) scanf("%d",&n)
#define scnll(n) scanf("%lld",&n)
#define scn2(n,m) scanf("%d%d",&n,&m)
#define scn3(n,m,w) scanf("%d%d%d",&n,&m,&w)
#define scn2ll(n,m) scanf("%lld%lld",&n,&m)
#define atoz(v) v.begin(),v.end()
#define ratoz(v) v.rbegin(),v.rend()
#define Fill(a,v) memset(a,v,sizeof(a))
#define sz(v) v.size()
#define fi first
#define se second
#define inf 1e9
#define sqr(x) x*x
#define max3(a,b,c) max(a,max(b,c))
#define min3(a,b,c) min(a,min(b,c))
#define pi (2*acos(0.0))

double cameraAngle,cameraHeight, angle, max_len, len, slices, stacks;
double level_of_recursion, pixels_along_axes, number_of_objects;
double number_light_sources ,  window_size = 500;

struct point
{
    double x,y,z;
    point(double xx, double yy, double zz)
    {
        x = xx;
        y = yy;
        z = zz;
    }
    point()
    {
        x = y = z = 0.0;
    }
};

point CrossProduct(point a, point b)
{
    point c;
    c.x = a.y*b.z - a.z*b.y;
    c.y = a.z*b.x - a.x*b.z;
    c.z = a.x*b.y - a.y*b.x;
    return c;
}

double DotProduct(point a,point b)
{
    return a.x*b.x + a.y*b.y + a.z*b.z;
}

point AddPoint(point a, point b)
{
    point ret = point(a.x+b.x, a.y+b.y, a.z+b.z);
    return ret;
}

point MulPoint(point a, double m)
{
    point ret = point(a.x*m, a.y*m, a.z*m);
    return ret;
}

point Rotate(point I, point wrt, double deg)    /// rotate I with respect to wrt by deg degree
{

    point perp = CrossProduct(wrt,I);

    deg = (deg*pi)/180.0;

    point ret = AddPoint( MulPoint(perp,sin(deg)), MulPoint(I,cos(deg)));
    return ret;
}

point Normalize(point a)
{
    double m = a.x*a.x + a.y*a.y + a.z*a.z;
    m = sqrt(m);
    if(m>0)
    {
        a.x /= m;
        a.y /= m;
        a.z /= m;
    }
    return a;
}


struct Color
{
    double r,g,b;

    Color(double rr, double gg, double bb)
    {
        r = rr;
        g = gg;
        b = bb;
    }
    Color() {}
};

struct Properties
{
    double ambient, diffuse, specular, reflection;  // coefficients
    double specular_exponent;
    Color color;

    Properties(Color c, double amb, double diff, double spc, double exp, double refl)
    {
        ambient = amb;
        diffuse = diff;
        specular = spc;
        specular_exponent = exp;
        color = c;
        reflection = refl;
    }
    Properties() {}
};

point Reflection(Ray ray, point p)
{
return Normalize(point(ray.dir.x-2*p.x*DotProduct(p,ray.dir), ray.dir.y-2*p.y*DotProduct(p,ray.dir), ray.dir.z-2*p.z*DotProduct(p,ray.dir)));
}

struct Sphere
{
    point center;
    double radius;
    Properties property;

    Sphere(point c, double r, Properties o)
    {
        center = c;
        radius = r;
        property = o;
    }
    Sphere() {}
    Draw()
    {
        glColor3f(property.color.r, property.color.g, property.color.b);

        struct point points[100][100];
        int i,j;
        double h,r;

        for(i=0; i<=stacks; i++)
        {
            h=radius*sin(((double)i/(double)stacks)*(pi/2));
            r=radius*cos(((double)i/(double)stacks)*(pi/2));
            for(j=0; j<=slices; j++)
            {
                points[i][j].x=r*cos(((double)j/(double)slices)*2*pi);
                points[i][j].y=r*sin(((double)j/(double)slices)*2*pi);
                points[i][j].z=h;
            }
        }
        for(i=0; i<stacks; i++)
        {

            for(j=0; j<slices; j++)
            {
                glBegin(GL_QUADS);
                {
                    glVertex3f(points[i][j].x + center.x, points[i][j].y + center.y, points[i][j].z + center.z);
                    glVertex3f(points[i][j+1].x + center.x, points[i][j+1].y + center.y, points[i][j+1].z + center.z);
                    glVertex3f(points[i+1][j+1].x + center.x, points[i+1][j+1].y + center.y, points[i+1][j+1].z + center.z);
                    glVertex3f(points[i+1][j].x + center.x, points[i+1][j].y + center.y, points[i+1][j].z + center.z);
                    //lower hemisphere
                    glVertex3f(points[i][j].x + center.x,points[i][j].y + center.y,-points[i][j].z + center.z);
                    glVertex3f(points[i][j+1].x + center.x,points[i][j+1].y + center.y,-points[i][j+1].z + center.z);
                    glVertex3f(points[i+1][j+1].x + center.x,points[i+1][j+1].y + center.y,-points[i+1][j+1].z + center.z);
                    glVertex3f(points[i+1][j].x + center.x,points[i+1][j].y + center.y,-points[i+1][j].z + center.z);

                }
                glEnd();
            }
        }
    }

    point Normal(point p)
    {
    return Normalize(point(p.x-center.x, p.y-center.y ,p.z-center.z));
    }

    double get_t(Ray ray)
    {
        point o(ray.origin.x - center.x,ray.origin.y - center.y , ray.origin.z - center.z);

        double a = DotProduct(ray.dir, ray.dir) , b = 2 * DotProduct(o,ray.dir);
        double c = DotProduct(o, o) - radius*radius , d = b*b - 4.0*a*c;

        if(d >= 0){
            a *= 2;
            d = sqrt(d);
            return min( (-b - d)/a , (-b + d)/a );
        }
        return -1;
    }


};

struct Triangle
{
    point a,b,c;
    Properties property;

    Triangle(point aa, point bb, point cc, Properties o)
    {
        a = aa;
        b = bb;
        c = cc;
        property = o;
    }
    Triangle() {}
    Draw()
    {
        glColor3f(property.color.r, property.color.g, property.color.b);

        glBegin(GL_TRIANGLES);
        {
            glVertex3f(a.x, a.y, a.z);
            glVertex3f(b.x, b.y, b.z);
            glVertex3f(c.x, c.y, c.z);
        }
        glEnd();
    }
};

struct Floor
{
    point center;
    double box_len,floor_len;
    Properties property;

    Floor(double bl, double fl)
    {

        floor_len = fl;
        box_len = bl;

        center = point(floor_len,floor_len,0);
    }

    Floor() {}

    void Draw()
    {

        int isBlack = 0;

        for(double x = -center.x ; x<=center.x; x += box_len,isBlack ^= 1)
        {
            for(double y = -center.y; y<=center.y;  y += box_len,isBlack ^= 1)
            {
                    if(isBlack) glColor3f(0, 0, 0);
                    else glColor3f(1, 1, 1);

                    glBegin(GL_QUADS);
                    glVertex3f(x, y,0);
                    glVertex3f(x,y + box_len,0);
                    glVertex3f(x + box_len,y + box_len,0);
                    glVertex3f(x + box_len,y,0);
                    glEnd();

            }
        }
    }

};

struct Ray{

    point origin , dir;

    Ray(){}

    Ray(point o,point d){
        dir = d;
        origin = o;
    }
};

Floor flr;
point pos, l,r,u;
vector<point>Lights;
vector<Triangle>Triangles;
vector<Sphere>Spheres;


void capture()
{
    bitmap_image bitmap_image(pixels_along_axes,pixels_along_axes);



    bitmap_image.save_image("out.bmp");
    exit(0);
}

void keyboardListener(unsigned char key, int x,int y)
{
    switch(key)
    {
    case '0':
        capture();
        break;
    case '1':
        l = Rotate(l,u,+3.0);
        r = Rotate(r,u,+3.0);
        break;
    case '2':
        l = Rotate(l,u,-3.0);
        r = Rotate(r,u,-3.0);
        break;
    case '3':
        u = Rotate(u,r,3.0);
        l = Rotate(l,r,3.0);
        break;
    case '4':
        u = Rotate(u,r,-3.0);
        l = Rotate(l,r,-3.0);
        break;
    case '5':
        u = Rotate(u,l,3.0);
        r = Rotate(r,l,3.0);
        break;
    case '6':
        u = Rotate(u,l,-3.0);
        r = Rotate(r,l,-3.0);
        break;

    default:
        break;
    }
}

void specialKeyListener(int key, int x,int y)
{
    switch(key)
    {
    case GLUT_KEY_DOWN:
        pos = point(pos.x-2*l.x, pos.y-2*l.y,pos.z-2*l.z );
        break;
    case GLUT_KEY_UP:
        pos = point(pos.x+l.x, pos.y+l.y,pos.z+l.z );
        break;

    case GLUT_KEY_RIGHT:
        pos = point(pos.x+r.x, pos.y+r.y,pos.z+r.z );
        break;
    case GLUT_KEY_LEFT:
        pos = point(pos.x-r.x, pos.y-r.y,pos.z-r.z );
        break;

    case GLUT_KEY_PAGE_UP:
        pos = point(pos.x+u.x, pos.y+u.y,pos.z+u.z );
        break;
    case GLUT_KEY_PAGE_DOWN:
        pos = point(pos.x-u.x, pos.y-u.y,pos.z-u.z );
        break;
    default:
        break;
    }
}


void mouseListener(int button, int state, int x, int y) 	//x, y is the x-y of the screen (2D)
{
    switch(button)
    {
    case GLUT_LEFT_BUTTON:

        break;
    default:
        break;
    }
}

void display()
{

    //clear the display
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glClearColor(0,0,0,0);	//color black
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    /********************
    / set-up camera here
    ********************/
    //load the correct matrix -- MODEL-VIEW matrix
    glMatrixMode(GL_MODELVIEW);

    //initialize the matrix
    glLoadIdentity();

    //now give three info
    //1. where is the camera (viewer)?
    //2. where is the camera looking?
    //3. Which direction is the camera's UP direction?

    ///gluLookAt(100,100,100,	0,0,0,	0,0,1);
    ///gluLookAt(200*cos(cameraAngle), 200*sin(cameraAngle), cameraHeight,0,0,0,0,0,1);


    gluLookAt(pos.x,pos.y, pos.z,pos.x + l.x, pos.y + l.y, pos.z + l.z,u.x, u.y, u.z);
    //again select MODEL-VIEW
    glMatrixMode(GL_MODELVIEW);


    /****************************
    / Add your objects from here
    ****************************/



    for(Triangle t : Triangles)
        t.Draw();
    for(Sphere s : Spheres)
    {
        s.Draw();
        // cout<<s.center.x<<" "<<s.center.y<<" "<<s.center.z<<endl;
    }

    flr.Draw();

    for(point p : Lights){

        Sphere sp;
        sp.center = p;
        sp.radius = .5;
        sp.property.color = Color(1,1,1);
        sp.Draw();
    }

    glutSwapBuffers();
}


void animate()
{
    angle+=0.01;
    ///codes for any changes in Models, Camera
    glutPostRedisplay();
}

void init()
{
    //codes for initialization
    double val = sin((pi*45.0)/180.0);
    cameraHeight=40.0;
    cameraAngle=1.0;
    angle=0;
    slices = stacks = 50.0;

    pos = point(100,100,40);
    u = point(0,0,1);
    r = point(-val,val,0);
    l = point(-val,-val,0);

    //clear the screen
    glClearColor(0,0,0,0);

    /************************
    / set-up projection here
    ************************/
    //load the PROJECTION matrix
    glMatrixMode(GL_PROJECTION);

    //initialize the matrix
    glLoadIdentity();

    //give PERSPECTIVE parameters
    gluPerspective(90,	1,	1,	1000.0);
}

vector<Triangle> PyramidToTriangle(point lowest, Properties prop, double len, double height)
{

    vector<Triangle> ret;

    point a, b, c, b1, b2;

    a = {lowest.x, lowest.y,lowest.z};
    b = {lowest.x + len,lowest.y, lowest.z};
    c = {lowest.x + len/2.0, lowest.y + len/2.0, lowest.z + height};

    b1 = {lowest.x, lowest.y + len, lowest.z};
    b2 = {lowest.x + len, lowest.y + len, lowest.z};


    Triangle t(a, b, c, prop);
    Triangle t1(a, b1, c,prop);
    Triangle t2(b1, b2, c, prop);
    Triangle t3(b2, b, c,prop);

    ret.pb(t);
    ret.pb(t1);
    ret.pb(t2);
    ret.pb(t3);
    return ret;

}


void ReadInput()
{

    flr = Floor(15,1000);

    ifstream in;
    in.open("description.txt");

    in>>level_of_recursion>>pixels_along_axes>>number_of_objects;


    for(int o=1; o<=number_of_objects; o++)
    {
        string type;
        in>>type;

        if(tolower(type[0]) == 's')
        {

            Sphere sph;


            in>>sph.center.x>>sph.center.y>>sph.center.z>>sph.radius;

            Properties property;

            in>>property.color.r>>property.color.g>>property.color.b;
            in>>property.ambient>>property.diffuse>>property.specular>>property.reflection;
            in>>property.specular_exponent;

            sph.property = property;

            Spheres.pb(sph);
        }
        else
        {

            point lowest ; //lowest x y z ordinate
            double base_length, height ;  //length of base and height of pyramid
            in>>lowest.x>>lowest.y>>lowest.z>>base_length>>height;

            Properties property;
            in>>property.color.r>>property.color.g>>property.color.b;
            in>>property.ambient>>property.diffuse>>property.specular>>property.reflection;
            in>>property.specular_exponent;

            vector<Triangle>parsed;
            parsed = PyramidToTriangle(lowest,property,base_length,height);

            for(Triangle t : parsed)
            {
                Triangles.pb(t);
            }
        }
    }



    in>>number_light_sources;

    for(int l=1; l<=number_light_sources; l++)
    {
        point p;
        in>>p.x>>p.y>>p.z;
        Lights.pb(p);
    }
    in.close();
}

int main(int argc, char **argv)
{
    glutInit(&argc,argv);
    glutInitWindowSize(window_size, window_size);
    glutInitWindowPosition(0, 0);
    glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGB);	//Depth, Double buffer, RGB color

    glutCreateWindow("My OpenGL Program");

    ReadInput();
    init();

    glEnable(GL_DEPTH_TEST);	//enable Depth Testing

    glutDisplayFunc(display);	//display callback function
    glutIdleFunc(animate);		//what you want to do in the idle time (when no drawing is occuring)

    glutKeyboardFunc(keyboardListener);
    glutSpecialFunc(specialKeyListener);
    glutMouseFunc(mouseListener);

    glutMainLoop();		//The main loop of OpenGL

    return 0;
}

