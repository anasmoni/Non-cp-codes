commit 61f90d614f905c6852a5e5530c0450cbb6185a30
Author: anasmoni <monimisimao@gmail.com>
Date:   Sun Feb 10 18:44:33 2019 +0100

    given Framework and User programe 1505087.c added

diff --git a/1505087.c b/1505087.c
new file mode 100644
index 0000000..cb62280
--- /dev/null
+++ b/1505087.c
@@ -0,0 +1,27 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "syscall.h"
+
+#define PG_SIZE 4096
+#define DEBUG 0
+
+int main(int argc, char *argv[]){
+
+
+	int i;
+	char *val[20];
+
+	for (i = 0; i < 12; ++i) {
+		val[i] = sbrk(PG_SIZE);
+		printf(1, "val[%d]=0x%x\n", i, val[i]);
+
+        if(i==12){
+            printf(1, "Called sbrk(PG_SIZE) 12 times - all physical pages taken.\nPress any key...\n");
+            val[12] = sbrk(PG_SIZE);
+            printf(1, "val[12]=0x%x\n", val[12]);
+        }
+	}
+
+	return 0;
+}
diff --git a/Makefile b/Makefile
index 09d790c..7389713 100644
--- a/Makefile
+++ b/Makefile
@@ -180,6 +180,7 @@ UPROGS=\
 	_stressfs\
 	_usertests\
 	_wc\
+	_1505087\
 	_zombie\
 
 fs.img: mkfs README $(UPROGS)
@@ -249,7 +250,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c 1505087.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff --git a/defs.h b/defs.h
index 82fb982..05fb5bb 100644
--- a/defs.h
+++ b/defs.h
@@ -53,6 +53,17 @@ int             readi(struct inode*, char*, uint, uint);
 void            stati(struct inode*, struct stat*);
 int             writei(struct inode*, char*, uint, uint);
 
+
+
+//1505087
+int             createSwapFile(struct proc* p);
+int             readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size);
+int             writeToSwapFile(struct proc* p, char* buffer, uint placeOnFile, uint size);
+int             removeSwapFile(struct proc* p);
+//
+
+
+
 // ide.c
 void            ideinit(void);
 void            ideintr(void);
@@ -124,6 +135,14 @@ void            yield(void);
 // swtch.S
 void            swtch(struct context**, struct context*);
 
+
+//1505087
+// sysfile
+struct inode*   create(char *path, short type, short major, short minor);
+int             isdirempty(struct inode *dp);
+//
+
+
 // spinlock.c
 void            acquire(struct spinlock*);
 void            getcallerpcs(void*, uint*);
diff --git a/fs.c b/fs.c
index feb59fe..4412e83 100644
--- a/fs.c
+++ b/fs.c
@@ -669,3 +669,119 @@ nameiparent(char *path, char *name)
 {
   return namex(path, 1, name);
 }
+
+
+////1505087
+
+// NEW FOR PAGING
+#include "fcntl.h"
+#define DIGITS 14
+char* itoa(int i, char b[]){
+    char const digit[] = "0123456789";
+    char* p = b;
+    if(i<0){
+        *p++ = '-';
+        i *= -1;
+    }
+    int shifter = i;
+    do{ //Move to where representation ends
+        ++p;
+        shifter = shifter/10;
+    }while(shifter);
+    *p = '\0';
+    do{ //Move back, inserting digits as u go
+        *--p = digit[i%10];
+        i = i/10;
+    }while(i);
+    return b;
+}
+//remove swap file of proc p;
+int
+removeSwapFile(struct proc* p)
+{
+	//path of proccess
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+	struct inode *ip, *dp;
+	struct dirent de;
+	char name[DIRSIZ];
+	uint off;
+	if(0 == p->swapFile)
+	{
+		return -1;
+	}
+	fileclose(p->swapFile);
+	begin_op();
+	if((dp = nameiparent(path, name)) == 0)
+	{
+		end_op();
+		return -1;
+	}
+	ilock(dp);
+	  // Cannot unlink "." or "..".
+	if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+	   goto bad;
+	if((ip = dirlookup(dp, name, &off)) == 0)
+		goto bad;
+	ilock(ip);
+	if(ip->nlink < 1)
+		panic("unlink: nlink < 1");
+	if(ip->type == T_DIR && !isdirempty(ip)){
+		iunlockput(ip);
+		goto bad;
+	}
+	memset(&de, 0, sizeof(de));
+	if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+		panic("unlink: writei");
+	if(ip->type == T_DIR){
+		dp->nlink--;
+		iupdate(dp);
+	}
+	iunlockput(dp);
+	ip->nlink--;
+	iupdate(ip);
+	iunlockput(ip);
+	end_op();
+	return 0;
+	bad:
+		iunlockput(dp);
+		end_op();
+		return -1;
+}
+//return 0 on success
+int
+createSwapFile(struct proc* p)
+{
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+    begin_op();
+    struct inode * in = create(path, T_FILE, 0, 0);
+	iunlock(in);
+	p->swapFile = filealloc();
+	if (p->swapFile == 0)
+		panic("no slot for files on /store");
+	p->swapFile->ip = in;
+	p->swapFile->type = FD_INODE;
+	p->swapFile->off = 0;
+	p->swapFile->readable = O_WRONLY;
+	p->swapFile->writable = O_RDWR;
+    end_op();
+    return 0;
+}
+//return as sys_write (-1 when error)
+int
+writeToSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+	return filewrite(p->swapFile, buffer, size);
+}
+//return as sys_read (-1 when error)
+int
+readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+	return fileread(p->swapFile, buffer,  size);
+}
+
diff --git a/mmu.h b/mmu.h
index a82d8e2..aec4420 100644
--- a/mmu.h
+++ b/mmu.h
@@ -95,6 +95,8 @@ struct segdesc {
 #define PTE_W           0x002   // Writeable
 #define PTE_U           0x004   // User
 #define PTE_PS          0x080   // Page Size
+#define PTE_A           0x020   // Accessed
+#define PTE_PG          0x200   // Paged out to secondary storage
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
diff --git a/proc.h b/proc.h
index 1647114..c3359a5 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //Swap file. must initiate with create swap file
+  struct file *swapFile;			//page file
+
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/sysfile.c b/sysfile.c
index 87e508b..fa40059 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -165,7 +165,7 @@ bad:
 }
 
 // Is the directory dp empty except for "." and ".." ?
-static int
+int
 isdirempty(struct inode *dp)
 {
   int off;
@@ -238,7 +238,8 @@ bad:
   return -1;
 }
 
-static struct inode*
+
+struct inode*
 create(char *path, short type, short major, short minor)
 {
   uint off;
