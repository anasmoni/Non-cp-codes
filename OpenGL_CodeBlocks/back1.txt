#include<bits/stdc++.h>

#include <windows.h>
#include <glut.h>

#define pi (2*acos(0.0))
using namespace std;


int drawgrid , drawaxes;

double cameraAngle,cameraHeight , angle , max_len , len , slices, stacks;

struct point
{
	double x,y,z;
	point(double xx , double yy, double zz){
	    x = xx;
	    y = yy;
	    z = zz;
	}
	point(){x = y = z = 0.0;}
};

point pos , l,r,u;

void drawAxes()
{
	if(drawaxes==1)
	{
		glColor3f(1.0, 1.0, 1.0);

		glBegin(GL_LINES);{
			glVertex3f( 100,0,0);
			glVertex3f(-100,0,0);

			glVertex3f(0,-100,0);
			glVertex3f(0, 100,0);

			glVertex3f(0,0, 100);
			glVertex3f(0,0,-100);
		}glEnd();
	}
}


void drawGrid()
{
	int i;
	if(drawgrid==1)
	{
		glColor3f(0.6, 0.6, 0.6);	//grey

		glBegin(GL_LINES);{
			for(i=-8;i<=8;i++){

				if(i==0)
					continue;	//SKIP the MAIN axes

				//lines parallel to Y-axis
				glVertex3f(i*10, -90, 0);
				glVertex3f(i*10,  90, 0);

				//lines parallel to X-axis
				glVertex3f(-90, i*10, 0);
				glVertex3f( 90, i*10, 0);
			}
		}glEnd();
	}
}


void drawSquare(double a)
{
	//glColor3f(1.0,0.0,0.0);
	glBegin(GL_QUADS); {
		glVertex3f(a, a, 0);
		glVertex3f(a, -a, 0);
		glVertex3f(-a, -a, 0);
		glVertex3f(-a, a, 0);
	}glEnd();
}

point CrossProduct(point a, point b){
    point c;
    c.x = a.y*b.z - a.z*b.y;
    c.y = a.z*b.x - a.x*b.z;
    c.z = a.x*b.y - a.y*b.x;
    return c;
}

point AddPoint(point a , point b){
    point ret = point(a.x+b.x , a.y+b.y , a.z+b.z);
    return ret;
}

point MulPoint(point a , double m){
    point ret = point(a.x*m , a.y*m , a.z*m);
    return ret;
}

point Rotate(point I , point wrt , double deg){ /// rotate I with respect to wrt by deg degree

    point perp = CrossProduct(wrt,I);

    deg = (deg*pi)/180.0;

    point ret = AddPoint( MulPoint(perp,sin(deg)) , MulPoint(I,cos(deg)));
    return ret;
}

void Draw_1_8_OfSphere(double radius)
{
	struct point points[100][100];
	int i,j;
	double h,r;
	//generate points
	for(i=0;i<=stacks;i++)
	{
		h=radius*sin(((double)i/(double)stacks)*(pi/2));
		r=radius*cos(((double)i/(double)stacks)*(pi/2));
		for(j=0;j<=slices;j++)
		{
			points[i][j].x=r*cos(((double)j/(double)slices)*pi/2);
			points[i][j].y=r*sin(((double)j/(double)slices)*pi/2);
			points[i][j].z=h;
		}
	}

	for(i=0;i<stacks;i++)
	{
       // glColor3f((double)i/(double)stacks,(double)i/(double)stacks,(double)i/(double)stacks);
       glColor3f(1,0,0);
		for(j=0;j<slices;j++)
		{
			glBegin(GL_QUADS);{

			    //upper hemisphere
				glVertex3f(points[i][j].x,points[i][j].y,points[i][j].z);
				glVertex3f(points[i][j+1].x,points[i][j+1].y,points[i][j+1].z);
				glVertex3f(points[i+1][j+1].x,points[i+1][j+1].y,points[i+1][j+1].z);
				glVertex3f(points[i+1][j].x,points[i+1][j].y,points[i+1][j].z);
                //lower hemisphere

			}glEnd();
		}
	}
}


void DrawSphere()
{
	double  r = max_len - len ;

	glPushMatrix();
	{
		glTranslatef(len, len, len);
		Draw_1_8_OfSphere(r);
	}
	glPopMatrix();

	glPushMatrix();
	{
		glTranslatef(-len, len, len);
		glRotated(90, 0, 0, 1);
		Draw_1_8_OfSphere(r);
	}
	glPopMatrix();

	glPushMatrix();
	{
		glTranslatef(-len, -len, len);
		glRotated(180, 0, 0, 1);
		Draw_1_8_OfSphere(r);
	}
	glPopMatrix();

	glPushMatrix();
	{
		glTranslatef(len, -len, len);
		glRotated(-90, 0, 0, 1);
		Draw_1_8_OfSphere(r);
	}
	glPopMatrix();

	glPushMatrix();
	{
		glTranslatef(len, len, -len);
		glRotated(180, 1, 1, 0);
		Draw_1_8_OfSphere(r);
	}
	glPopMatrix();

	glPushMatrix();
	{
		glTranslatef(-len, len, -len);
		glRotated(90, 0, 0, 1);
		glRotated(180, 1, 1, 0);
		Draw_1_8_OfSphere(r);
	}
	glPopMatrix();

	glPushMatrix();
	{
		glTranslatef(-len, -len, -len);
		glRotated(180, 0, 0, 1);
		glRotated(180, 1, 1, 0);
		Draw_1_8_OfSphere(r);
	}
	glPopMatrix();

	glPushMatrix();
	{
		glTranslatef(len, -len, -len);
		glRotated(-90, 0, 0, 1);
		glRotated(180, 1, 1, 0);
		Draw_1_8_OfSphere(r);
	}
	glPopMatrix();

}


void Draw_6_Squares()
{
	glColor3f(1, 1, 1);

    glPushMatrix();
	{
        glTranslated(0, 0, max_len);
        drawSquare(len);
	}
    glPopMatrix();

    glPushMatrix();
	{
        glTranslated(0, 0, -max_len);
        drawSquare(len);
	}
    glPopMatrix();

    glPushMatrix();
	{
        glRotated(90, 1, 0, 0);
        glTranslated(0, 0, max_len);
        drawSquare(len);
	}
    glPopMatrix();

    glPushMatrix();
	{
        glRotated(-90, 1, 0, 0);
        glTranslated(0, 0, max_len);
        drawSquare(len);
	}
    glPopMatrix();


	glPushMatrix();
	{
        glRotated(90, 0, 1, 0);
        glTranslated(0, 0, max_len);
        drawSquare(len);
	}
    glPopMatrix();

	glPushMatrix();
	{
        glRotated(-90, 0, 1, 0);
        glTranslated(0, 0, max_len);
        drawSquare(len);
	}
	glPopMatrix();
}

void Draw_1_4_OfCylinder(double radius, double height)
{
	struct point points[100][100];
	int i, j;
	double h, r;
	//generate points
	for (i = 0; i <= stacks; i++)
	{
		h = height * sin(((double)i / (double)stacks)*(pi / 2));
		//r=radius*cos(((double)i/(double)stacks)*(pi/2));
		//h = height;
		r = radius;
		for (j = 0; j <= slices; j++)
		{
			points[i][j].x = r * cos(((double)j / (double)slices)*.5*pi);
			points[i][j].y = r * sin(((double)j / (double)slices)*.5*pi);
			points[i][j].z = h;
		}
	}
	//draw quads using generated points
	for (i = 0; i<stacks; i++)
	{
		glColor3f(0, 1, 0);
		for (j = 0; j<slices; j++)
		{
			glBegin(GL_QUADS); {
				//upper hemisphere
				glVertex3f(points[i][j].x, points[i][j].y, points[i][j].z);
				glVertex3f(points[i][j + 1].x, points[i][j + 1].y, points[i][j + 1].z);
				glVertex3f(points[i + 1][j + 1].x, points[i + 1][j + 1].y, points[i + 1][j + 1].z);
				glVertex3f(points[i + 1][j].x, points[i + 1][j].y, points[i + 1][j].z);
				//lower hemisphere
				glVertex3f(points[i][j].x, points[i][j].y, -points[i][j].z);
				glVertex3f(points[i][j + 1].x, points[i][j + 1].y, -points[i][j + 1].z);
				glVertex3f(points[i + 1][j + 1].x, points[i + 1][j + 1].y, -points[i + 1][j + 1].z);
				glVertex3f(points[i + 1][j].x, points[i + 1][j].y, -points[i + 1][j].z);
			}glEnd();
		}
	}

}

void Draw_12_Cylinders()
{
	double r = max_len - len;

    ///back right
	glPushMatrix();
	{
		glTranslatef(-len, -len,0);
		glRotated(180, 0, 0, 1);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();

    ///back left
	glPushMatrix();
	{
		glTranslatef(len, -len,0);
		glRotated(-90, 0, 0, 1);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();

    ///bottom back
	glPushMatrix();
	{
		glTranslatef(0, -len, -len);
		glRotated(-90, 1, 0, 0);
		glRotated(90, 0, 1, 0);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();

    /// top back
	glPushMatrix();
	{
		glTranslatef(0, -len, len);
		glRotated(90, 1, 0, 0);
		glRotated(-90, 0, 1, 0);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();

    /// top left
	glPushMatrix();
	{
		glTranslatef(len, 0, len);
		glRotated(90, 1, 0, 0);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();
    ///bottom left
	glPushMatrix();
	{
		glTranslatef(len, 0, -len);
		glRotated(-90, 1, 0, 0);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();

    ///top right
	glPushMatrix();
	{
		glTranslatef(-len, 0,  len);
		glRotated(-90, 0, 1, 0);
		glRotated(90, 1, 0, 0);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();

    ///bottom right
	glPushMatrix();
	{
		glTranslatef(-len, 0, -len);
		glRotated(90, 0, 1, 0);
		glRotated(-90, 1, 0, 0);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();

	///front left
	glPushMatrix();
	{
		glTranslatef(len, len,0);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();

    /// front right
	glPushMatrix();
	{
		glTranslatef(-len, len,0);
		glRotated(90, 0, 0, 1);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();


    /// front top
	glPushMatrix();
	{
		glTranslatef(0, len, len);
		glRotated(-90, 0, 1, 0);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();

    /// front bottom
	glPushMatrix();
	{
		glTranslatef(0, len, -len);
		glRotated(90, 0, 1, 0);
		Draw_1_4_OfCylinder(r, len);
	}
	glPopMatrix();
}

void keyboardListener(unsigned char key, int x,int y){
	switch(key){

		case '1':
			l = Rotate(l,u,+3.0);
            r = Rotate(r,u,+3.0);
			break;
        case '2':
            l = Rotate(l,u,-3.0);
            r = Rotate(r,u,-3.0);
			break;
        case '3':
            u = Rotate(u,r,3.0);
            l = Rotate(l,r,3.0);
			break;
        case '4':
            u = Rotate(u,r,-3.0);
            l = Rotate(l,r,-3.0);
			break;
        case '5':
            u = Rotate(u,l,3.0);
            r = Rotate(r,l,3.0);
			break;
        case '6':
            u = Rotate(u,l,-3.0);
            r = Rotate(r,l,-3.0);
			break;

		default:
			break;
	}
}

void specialKeyListener(int key, int x,int y){
	switch(key){
		case GLUT_KEY_DOWN:
			pos = point(pos.x-2*u.x , pos.y-2*u.y ,pos.z-2*u.z );
			break;
		case GLUT_KEY_UP:
			pos = point(pos.x+2*u.x , pos.y+2*u.y ,pos.z+2*u.z );
			break;

		case GLUT_KEY_RIGHT:
			pos = point(pos.x+2*r.x , pos.y+2*r.y ,pos.z+2*r.z );
			break;
		case GLUT_KEY_LEFT:
			pos = point(pos.x-2*r.x , pos.y-2*r.y ,pos.z-2*r.z );
			break;

		case GLUT_KEY_PAGE_UP:
            pos = point(pos.x+2*u.x , pos.y+2*u.y ,pos.z+2*u.z );
			break;
		case GLUT_KEY_PAGE_DOWN:
            pos = point(pos.x-2*u.x , pos.y-2*u.y ,pos.z-2*u.z );
			break;

		case GLUT_KEY_INSERT:
			break;

		case GLUT_KEY_HOME:
		len -= 0.2;
		len = max(len, 0.0);
		break;
	case GLUT_KEY_END:
		len += 0.2;
		len = min(len, max_len);
		break;

		default:
			break;
	}
}


void mouseListener(int button, int state, int x, int y){	//x, y is the x-y of the screen (2D)
	switch(button){
		case GLUT_LEFT_BUTTON:
			if(state == GLUT_DOWN){		// 2 times?? in ONE click? -- solution is checking DOWN or UP
				drawaxes=1-drawaxes;
			}
			break;

		case GLUT_RIGHT_BUTTON:
			//........
			break;

		case GLUT_MIDDLE_BUTTON:
			//........
			break;

		default:
			break;
	}
}

void display(){

	//clear the display
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glClearColor(0,0,0,0);	//color black
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	/********************
	/ set-up camera here
	********************/
	//load the correct matrix -- MODEL-VIEW matrix
	glMatrixMode(GL_MODELVIEW);

	//initialize the matrix
	glLoadIdentity();

	//now give three info
	//1. where is the camera (viewer)?
	//2. where is the camera looking?
	//3. Which direction is the camera's UP direction?

	///gluLookAt(100,100,100,	0,0,0,	0,0,1);
	///gluLookAt(200*cos(cameraAngle), 200*sin(cameraAngle), cameraHeight,0,0,0,0,0,1);

	gluLookAt(pos.x, pos.y, pos.z,pos.x + l.x, pos.y + l.y, pos.z + l.z,u.x, u.y, u.z);

	//again select MODEL-VIEW
	glMatrixMode(GL_MODELVIEW);


	/****************************
	/ Add your objects from here
	****************************/
	//add objects
    ///drawCone(20,50,24);
	drawAxes();
	drawGrid();

    ///drawSS();
    DrawSphere();
    Draw_12_Cylinders();
    Draw_6_Squares();

    ///glColor3f(1,0.5,0.5);
    ///drawSquare(10);

    ///drawCircle(30,24);
	///drawSphere(30,24,20);

	//ADD this line in the end --- if you use double buffer (i.e. GL_DOUBLE)
	glutSwapBuffers();
}


void animate(){
	angle+=0.01;
	///codes for any changes in Models, Camera
	glutPostRedisplay();
}

void init(){
	//codes for initialization
	double val = sin((pi*45.0)/180.0);
	drawgrid=0;
	drawaxes=1;
	cameraHeight=150.0;
	cameraAngle=1.0;
	angle=0;

	max_len = 10;
	len = 6;
	slices = stacks = 50.0;

    pos = point(40,40,0);
    u = point(0,0,1);
    r = point(-val,val,0);
    l = point(-val,-val,0);
	//clear the screen
	glClearColor(0,0,0,0);

	/************************
	/ set-up projection here
	************************/
	//load the PROJECTION matrix
	glMatrixMode(GL_PROJECTION);

	//initialize the matrix
	glLoadIdentity();

	//give PERSPECTIVE parameters
	gluPerspective(80,	1,	1,	1000.0);
	//field of view in the Y (vertically)
	//aspect ratio that determines the field of view in the X direction (horizontally)
	//near distance
	//far distance
}

int main(int argc, char **argv){
	glutInit(&argc,argv);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(0, 0);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGB);	//Depth, Double buffer, RGB color

	glutCreateWindow("My OpenGL Program");

	init();

	glEnable(GL_DEPTH_TEST);	//enable Depth Testing

	glutDisplayFunc(display);	//display callback function
	glutIdleFunc(animate);		//what you want to do in the idle time (when no drawing is occuring)

	glutKeyboardFunc(keyboardListener);
	glutSpecialFunc(specialKeyListener);
	glutMouseFunc(mouseListener);

	glutMainLoop();		//The main loop of OpenGL

	return 0;
}

